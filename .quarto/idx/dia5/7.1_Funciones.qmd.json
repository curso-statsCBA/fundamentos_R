{"title":"Funciones","markdown":{"yaml":{"title":"Funciones","pagetitle":"Funciones"},"headingText":"¿Cómo creo una función?","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\nLas funciones en R son las herramientas que nos permiten realizar una gran diversidad de análisis. Para ello, R provee de una numerosa y potente biblioteca de ellas, las cuales vienen instalada por defecto. Además, como hemos desarrollado al principio del curso, existe una abanico mega-diverso de paquetes de R desarrollados por los propios usuarios, especialmente desarrollados para la realización de tareas específicas.\n\nNo obstante, es usual que en un flujo de trabajo de intermedio a avanzado necesitemos desarrollar nuestras propias funciones. La razón para ello radica en la ejecución de una tarea muy específica como parte de nuestros análisis, pero que al mismo tiempo debe realizarse múltiples veces para que amerite su desarrollo en forma de función.\n\nLas funciones en R se asignan a objetos, cuyo nombre será el nombre de la función, con la expresión `function()`. Dentro de los paréntesis debemos indicar los argumentos de la función. Estos serán los objetos con los que la función trabajará de alguna manera, y devolverá alguna salida determinada. La sintaxis general es la siguiente:\n\n```{r}\nmi_funcion <- function(argumento1, argumento2, argumento3){\n  # Inserte aqui el codigo que trabajara con los objetos definidos en los argumentos,\n  # junto con la salida que se propone para la nueva funcion\n}\n```\n\nPor ejemplo:\n\n```{r}\nblabla <- function(nombre = \"- inserte aquí su nombre -\"){\n  print(paste(\"Mi nombre es\", nombre, \"y me encanta el curso de Fundamentos básicos del lenguaje R.\"))\n}\n```\n\nAl correr el bloque de código anterior, simplemente estamos *creando* la función, y no *corriendo* el código programado. Esta se carga como un objeto propio en el entorno, quedando disponible para su uso futuro.\n\nEn este ejemplo, el argumento `nombre` se encuentra asignado a una línea de texto. De esta manera, la función entiende que el valor indicado es el **valor por defecto**, para los casos los que el usuario no define un valor particular para dicho argumento. La definición de valores por defecto no es obligatoria, pero puede ser útil en muchos casos. Si corremos dicha función suelta, sin definir nada en específico, podemos observar el resultado:\n\n```{r}\nblabla()\n```\n\nEn cambio, podemos asignarle un valor al argumento `nombre`:\n\n```{r}\nblabla(nombre = \"Lionel Scaloni\")\n```\n\n### Unas palabritas sobre *entornos*\n\nUna cuestión a considerar en el contexto de creación de funciones es el uso que las mismas hacen de los *entornos*. Podemos definir a un entorno como al *espacio* en donde se guardan nuestros objetos. Cuando creamos un objeto, sea una tabla, un vector, una función o cualquier otro, estos se guardan en el *entorno global*, y de hecho aparecen visibles en el panel correspondiente de la interfaz de RStudio. Cuando creamos una función, se crea un *sub-entorno* contenido dentro de la función. ¿Por qué es esto relevante? Porque los entornos son los lugares en donde se guardan los objetos de los que haremos uso para nuestras funciones, y una función buscará *primero* en el entorno de la función, *luego* en el entorno que se encuentra un nivel por encima de este.\n\nVeámoslo con un ejemplo. La siguiente función toma un número y le suma 5:\n\n```{r}\nfff <- function(x){\n  y <- x + 5\n  y\n}\n```\n\nPor ejemplo:\n\n```{r}\nfff(x = 3)\n```\n\nEsta función guarda el resultado en un objeto llamado `y`. Sin embargo, podemos ver que este objeto no se guarda en el entorno global, lo cual se evidencia cuando intentamos leer dicho objeto:\n\n```{r error=TRUE}\ny\n```\n\nLa razón es que `y` se creó en el entorno de la función `fff()`, se guarda allí dentro, se utiliza para la ejecución de la función, y finalmente se descarta.\n\nVeamos ahora la siguiente variante de la función:\n\n```{r}\nfff <- function(){\n  y <- x + 5\n  y\n}\n```\n\nLa diferencia es que esta función no tiene argumentos. Veamos lo que sucede al correrla:\n\n```{r error=TRUE}\nfff()\n```\n\nEl error se debe a que `x` no está definido. Pero miremos lo que pasa si definimos a `x` *por fuera* de la función:\n\n```{r}\nx <- 9\nfff()\n```\n\n¿Que pasó? La función *buscó* al objeto `x` dentro del entorno de la función, no lo encontró, pero luego buscó en el entorno un nivel por encima, que es el entorno global. Encontró un objeto con dicho nombre, y lo utilizó para su ejecución.\n\n**Para testear:** ¿Qué sucedería si `x` está definido *por fuera* de la función pero también *dentro* de la misma?\n\n## Uso de `return()`\n\nDesarrollemos una función un poco más compleja. Por ejemplo, imaginemos una función que calcula el valor promedio de un conjunto de números (tarea que, ya sabemos, ejecuta `mean()`). Una forma de hacerlo es la siguiente:\n\n```{r}\nvalor_promedio <- function(x){\n  # Sumo todos los valores del vector x con un ciclo for\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i]\n  }\n  \n  # Divido la suma por la cantidad de elementos\n  promedio <- sum/length(x)\n  \n  return(promedio)\n}\n```\n\nNotar que el contenido de la función es casi idéntico a como programaríamos por fuera del contexto de una función. La única diferencia es que la función permite realizar la tarea propuesta **para cualquier caso**, y no para solo uno en particular. Aquí, podemos definir cualquier vector numérico que quisiéramos, y calcular el promedio a partir del vector indicado.\n\nOtra diferencia que vemos aquí respecto de la función del ejemplo anterior (`blabla()`) es el uso de la función `return()`. Esta expresión indica el valor a devolver por la función, y su llamado termina la ejecución de la función en esa línea. Es decir, toda línea de código por debajo de un `return()` no se ejecutará. ¿De qué serviría esto? Por ejemplo, la función podría ejecutar un bloque de código si se cumple una condición, y otro bloque si no se cumple, justificando la presencia de más de un `return()`.\n\nLa siguiente línea calcula el valor promedio para el vector `1:30`:\n\n```{r}\nvalor_promedio(1:30)\n```\n\nNotar que no es necesario aclarar explícitamente el nombre del argumento `x`, basta con que sea el primero.\n\nUna versión un poquito más compleja que la anterior posee un segundo argumento que le otorga un peso a cada elemento de la muestra. Por lo tanto, estaremos calculando un promedio ponderado. Se espera un vector numérico de longitud igual a `x`, indicando el peso otorgado a cada elemento. Por defecto, definimos un vector numérico de unos, otorgando así el mismo peso a cada elemento:\n\n```{r}\nvalor_promedio <- function(x, pesos = rep(1, length(x))){\n  # Sumo todos los valores del vector x\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i] * pesos[i]\n  }\n  \n  promedio <- sum/length(x)\n  return(promedio)\n}\n```\n\nPor ejemplo, para el mismo conjunto de números anterior:\n\n```{r}\npesos_aleatorios <- sample(c(0.5, 0.75, 1), length(1:30), replace = TRUE)\nvalor_promedio(x = 1:30, pesos = pesos_aleatorios)\n```\n\n## Uso de `stop()` y `warning()`\n\nAdemás de `return()`, las funciones `stop()` y `warning()` serán de utilidad cuando creemos nuestras propias funciones. Por ejemplo, imaginemos que el usuario indica para el argumento `x` un vector de tipo `character()`. Obviamente, el promedio no puede calcularse, y obtenemos un error. Este error, sin embargo, no es muy informativo:\n\n```{r error=TRUE}\nvalor_promedio(x = LETTERS[1:10])\n```\n\nPodemos agregar una condición que evalúe si el vector es numérico, caso contrario utilizamos `stop()`.\n\n```{r}\nvalor_promedio <- function(x, pesos = rep(1, length(x))){\n  # Evalua si el vector en x son numeros\n  if(!is.numeric(x)){\n    stop(\"El vector indicado en 'x' debe ser numérico.\")\n  }\n  \n  # Sumo todos los valores del vector x\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i] * pesos[i]\n  }\n  \n  promedio <- sum/length(x)\n  return(promedio)\n}\n```\n\nCon el uso de `stop()` la ejecución de la función se termina, y se imprime un mensaje informativo en la consola:\n\n```{r error=TRUE}\nvalor_promedio(x = LETTERS[1:10])\n```\n\nLa función `warning()` imprime una advertencia, pero continúa con la ejecución. Por ejemplo, imaginemos que el usuario indica un vector de pesos de diferente longitud a la longitud del vector indicado en `x`. Una opción para contemplar este escenario sería la siguiente:\n\n```{r}\nvalor_promedio <- function(x, pesos = rep(1, length(x))){\n  # Evalua si el vector en x son numeros\n  if(!is.numeric(x)){\n    stop(\"El vector indicado en 'x' debe ser numérico.\")\n  }\n  \n  # Evalua si la longitud del vector en 'pesos' es igual a la de 'x'\n  if(length(x) != length(pesos)){\n    warning(\"El argumento 'pesos' debe ser un vector numérico de la misma longitud que el vector en 'x'. Se tomó el valor por defecto.\")\n    pesos <- rep(1, length(x))\n  }\n  \n  # Sumo todos los valores del vector x\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i] * pesos[i]\n  }\n  \n  promedio <- sum/length(x)\n  return(promedio)\n}\n```\n\nNotar que se evalúa la condición planteada para el argumento `pesos`. Si no se cumple que la longitud del vector indicado es igual a la longitud del vector en `x`, la función imprime una advertencia. Además, para que la función siga ejecutándose correctamente, definimos `pesos <- rep(1, length(x))`, es decir, el valor por defecto. Este último paso es fundamental, de lo contrario la salida de la función sería impredecible.\n\n```{r}\nvalor_promedio(x = 1:30, pesos = c(0.5, 1, 0.75))\n```\n\nVemos que el promedio es calculado correctamente (con `pesos = rep(1, length(x))`), pero además se imprime una advertencia.\n\nEl uso de las funciones `stop()` y `warning()` en el contexto de funciones no es fundamental, pero adquieren relevancia para funciones que usarán otras personas. Uno nunca sabe con absoluta seguridad el tipo de entrada que un usuario externo usaría en una de nuestras funciones, y uno debe prevenir distintos escenarios. Sin embargo, si a las funciones las usaremos sólo nosotros, contemplar estos escenarios no será vital, por lo que no sería absolutamente necesario el uso de `stop()` o `warning()`.\n\n------------------------------------------------------------------------\n\n## Funciones del tipo *apply*\n\nLas funciones de la familia *apply* se utilizan para aplicar una función determinada a una lista o a un vector. Es útil para realizar un mismo cálculo a un conjunto de elementos dado, evitando utilizar, por ejemplo, un ciclo `for`.\n\nPor ejemplo, imaginemos una lista de 3 elementos, cada elemento un vector numérico:\n\n```{r}\nlista_numeros <- list(sample(1:1000, size = 50),\n                      sample(1:1000, size = 50),\n                      sample(1:1000, size = 50))\nlista_numeros\n```\n\nLa función `sapply()` aplica una función dada a un objeto de tipo `list()`, y devuelve un vector. En este ejemplo, utilizaremos la función recientemente creada (`valor_promedio()`), para calcular el promedio de cada conjunto de números de la lista (indicados en el primer argumento):\n\n```{r}\npromedios <- sapply(lista_numeros, FUN = valor_promedio)\npromedios\n```\n\nNotar que para el argumento `FUN` indicamos el nombre de la función sin los paréntesis, la cual debe existir en el entorno (cargada por el usuario o por defecto en R).\n\nSi quisiéramos indicar otros argumentos para la función `valor_promedio()`, estos pueden definirse luego del argumento `FUN`:\n\n```{r}\npesos_aleatorios <- sample(c(0.5, 0.75, 1), size = 50, replace = TRUE)\npromedios <- sapply(lista_numeros, FUN = valor_promedio, pesos = pesos_aleatorios)\npromedios\n```\n\n**Para pensar:** tal cual como está programada, la función `valor_promedio()` no es útil para ser utilizada con la función `sapply()`, especialmente en cuanto al argumento `pesos`. ¿Por qué?\n\nExisten otras variantes a la función `sapply()`, como por ejemplo `lapply()`, que funciona de manera idéntica pero devuelve una lista en vez de un vector.\n\n## Ejercicios\n\n1.  Cree una función que calcule el área de un triángulo a partir de su base y altura. Contemple el escenario en el que el usuario indique valores no numéricos para los argumentos.\n2.  Cree una función que calcule el error estándar de un conjunto de números. El error estándar se calcula realizando el cociente entre el desvío estándar de la muestra y la raíz cuadrada de la cantidad de números evaluados.\n3.  A partir de la función que calcula el error estándar, utilice la función `sapply()` para calcular el error estándar del conjunto de números `seq(1, 50, 20)`, `c(501, 920, 759, 233)` y `-14:28`.\n\n<br>\n\n<p align=\"center\">\n\n<a href=\"pics/meme_practico_funciones.png\" target=\"_blank\"><img src=\"pics/meme_practico_funciones.png\" style=\"padding: 5px 0 5px 0;width: 40rem;max-width:100%;height:auto;vertical-align:middle;border-style: none;\"/></a>\n\n</p>\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## ¿Cómo creo una función?\n\nLas funciones en R son las herramientas que nos permiten realizar una gran diversidad de análisis. Para ello, R provee de una numerosa y potente biblioteca de ellas, las cuales vienen instalada por defecto. Además, como hemos desarrollado al principio del curso, existe una abanico mega-diverso de paquetes de R desarrollados por los propios usuarios, especialmente desarrollados para la realización de tareas específicas.\n\nNo obstante, es usual que en un flujo de trabajo de intermedio a avanzado necesitemos desarrollar nuestras propias funciones. La razón para ello radica en la ejecución de una tarea muy específica como parte de nuestros análisis, pero que al mismo tiempo debe realizarse múltiples veces para que amerite su desarrollo en forma de función.\n\nLas funciones en R se asignan a objetos, cuyo nombre será el nombre de la función, con la expresión `function()`. Dentro de los paréntesis debemos indicar los argumentos de la función. Estos serán los objetos con los que la función trabajará de alguna manera, y devolverá alguna salida determinada. La sintaxis general es la siguiente:\n\n```{r}\nmi_funcion <- function(argumento1, argumento2, argumento3){\n  # Inserte aqui el codigo que trabajara con los objetos definidos en los argumentos,\n  # junto con la salida que se propone para la nueva funcion\n}\n```\n\nPor ejemplo:\n\n```{r}\nblabla <- function(nombre = \"- inserte aquí su nombre -\"){\n  print(paste(\"Mi nombre es\", nombre, \"y me encanta el curso de Fundamentos básicos del lenguaje R.\"))\n}\n```\n\nAl correr el bloque de código anterior, simplemente estamos *creando* la función, y no *corriendo* el código programado. Esta se carga como un objeto propio en el entorno, quedando disponible para su uso futuro.\n\nEn este ejemplo, el argumento `nombre` se encuentra asignado a una línea de texto. De esta manera, la función entiende que el valor indicado es el **valor por defecto**, para los casos los que el usuario no define un valor particular para dicho argumento. La definición de valores por defecto no es obligatoria, pero puede ser útil en muchos casos. Si corremos dicha función suelta, sin definir nada en específico, podemos observar el resultado:\n\n```{r}\nblabla()\n```\n\nEn cambio, podemos asignarle un valor al argumento `nombre`:\n\n```{r}\nblabla(nombre = \"Lionel Scaloni\")\n```\n\n### Unas palabritas sobre *entornos*\n\nUna cuestión a considerar en el contexto de creación de funciones es el uso que las mismas hacen de los *entornos*. Podemos definir a un entorno como al *espacio* en donde se guardan nuestros objetos. Cuando creamos un objeto, sea una tabla, un vector, una función o cualquier otro, estos se guardan en el *entorno global*, y de hecho aparecen visibles en el panel correspondiente de la interfaz de RStudio. Cuando creamos una función, se crea un *sub-entorno* contenido dentro de la función. ¿Por qué es esto relevante? Porque los entornos son los lugares en donde se guardan los objetos de los que haremos uso para nuestras funciones, y una función buscará *primero* en el entorno de la función, *luego* en el entorno que se encuentra un nivel por encima de este.\n\nVeámoslo con un ejemplo. La siguiente función toma un número y le suma 5:\n\n```{r}\nfff <- function(x){\n  y <- x + 5\n  y\n}\n```\n\nPor ejemplo:\n\n```{r}\nfff(x = 3)\n```\n\nEsta función guarda el resultado en un objeto llamado `y`. Sin embargo, podemos ver que este objeto no se guarda en el entorno global, lo cual se evidencia cuando intentamos leer dicho objeto:\n\n```{r error=TRUE}\ny\n```\n\nLa razón es que `y` se creó en el entorno de la función `fff()`, se guarda allí dentro, se utiliza para la ejecución de la función, y finalmente se descarta.\n\nVeamos ahora la siguiente variante de la función:\n\n```{r}\nfff <- function(){\n  y <- x + 5\n  y\n}\n```\n\nLa diferencia es que esta función no tiene argumentos. Veamos lo que sucede al correrla:\n\n```{r error=TRUE}\nfff()\n```\n\nEl error se debe a que `x` no está definido. Pero miremos lo que pasa si definimos a `x` *por fuera* de la función:\n\n```{r}\nx <- 9\nfff()\n```\n\n¿Que pasó? La función *buscó* al objeto `x` dentro del entorno de la función, no lo encontró, pero luego buscó en el entorno un nivel por encima, que es el entorno global. Encontró un objeto con dicho nombre, y lo utilizó para su ejecución.\n\n**Para testear:** ¿Qué sucedería si `x` está definido *por fuera* de la función pero también *dentro* de la misma?\n\n## Uso de `return()`\n\nDesarrollemos una función un poco más compleja. Por ejemplo, imaginemos una función que calcula el valor promedio de un conjunto de números (tarea que, ya sabemos, ejecuta `mean()`). Una forma de hacerlo es la siguiente:\n\n```{r}\nvalor_promedio <- function(x){\n  # Sumo todos los valores del vector x con un ciclo for\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i]\n  }\n  \n  # Divido la suma por la cantidad de elementos\n  promedio <- sum/length(x)\n  \n  return(promedio)\n}\n```\n\nNotar que el contenido de la función es casi idéntico a como programaríamos por fuera del contexto de una función. La única diferencia es que la función permite realizar la tarea propuesta **para cualquier caso**, y no para solo uno en particular. Aquí, podemos definir cualquier vector numérico que quisiéramos, y calcular el promedio a partir del vector indicado.\n\nOtra diferencia que vemos aquí respecto de la función del ejemplo anterior (`blabla()`) es el uso de la función `return()`. Esta expresión indica el valor a devolver por la función, y su llamado termina la ejecución de la función en esa línea. Es decir, toda línea de código por debajo de un `return()` no se ejecutará. ¿De qué serviría esto? Por ejemplo, la función podría ejecutar un bloque de código si se cumple una condición, y otro bloque si no se cumple, justificando la presencia de más de un `return()`.\n\nLa siguiente línea calcula el valor promedio para el vector `1:30`:\n\n```{r}\nvalor_promedio(1:30)\n```\n\nNotar que no es necesario aclarar explícitamente el nombre del argumento `x`, basta con que sea el primero.\n\nUna versión un poquito más compleja que la anterior posee un segundo argumento que le otorga un peso a cada elemento de la muestra. Por lo tanto, estaremos calculando un promedio ponderado. Se espera un vector numérico de longitud igual a `x`, indicando el peso otorgado a cada elemento. Por defecto, definimos un vector numérico de unos, otorgando así el mismo peso a cada elemento:\n\n```{r}\nvalor_promedio <- function(x, pesos = rep(1, length(x))){\n  # Sumo todos los valores del vector x\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i] * pesos[i]\n  }\n  \n  promedio <- sum/length(x)\n  return(promedio)\n}\n```\n\nPor ejemplo, para el mismo conjunto de números anterior:\n\n```{r}\npesos_aleatorios <- sample(c(0.5, 0.75, 1), length(1:30), replace = TRUE)\nvalor_promedio(x = 1:30, pesos = pesos_aleatorios)\n```\n\n## Uso de `stop()` y `warning()`\n\nAdemás de `return()`, las funciones `stop()` y `warning()` serán de utilidad cuando creemos nuestras propias funciones. Por ejemplo, imaginemos que el usuario indica para el argumento `x` un vector de tipo `character()`. Obviamente, el promedio no puede calcularse, y obtenemos un error. Este error, sin embargo, no es muy informativo:\n\n```{r error=TRUE}\nvalor_promedio(x = LETTERS[1:10])\n```\n\nPodemos agregar una condición que evalúe si el vector es numérico, caso contrario utilizamos `stop()`.\n\n```{r}\nvalor_promedio <- function(x, pesos = rep(1, length(x))){\n  # Evalua si el vector en x son numeros\n  if(!is.numeric(x)){\n    stop(\"El vector indicado en 'x' debe ser numérico.\")\n  }\n  \n  # Sumo todos los valores del vector x\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i] * pesos[i]\n  }\n  \n  promedio <- sum/length(x)\n  return(promedio)\n}\n```\n\nCon el uso de `stop()` la ejecución de la función se termina, y se imprime un mensaje informativo en la consola:\n\n```{r error=TRUE}\nvalor_promedio(x = LETTERS[1:10])\n```\n\nLa función `warning()` imprime una advertencia, pero continúa con la ejecución. Por ejemplo, imaginemos que el usuario indica un vector de pesos de diferente longitud a la longitud del vector indicado en `x`. Una opción para contemplar este escenario sería la siguiente:\n\n```{r}\nvalor_promedio <- function(x, pesos = rep(1, length(x))){\n  # Evalua si el vector en x son numeros\n  if(!is.numeric(x)){\n    stop(\"El vector indicado en 'x' debe ser numérico.\")\n  }\n  \n  # Evalua si la longitud del vector en 'pesos' es igual a la de 'x'\n  if(length(x) != length(pesos)){\n    warning(\"El argumento 'pesos' debe ser un vector numérico de la misma longitud que el vector en 'x'. Se tomó el valor por defecto.\")\n    pesos <- rep(1, length(x))\n  }\n  \n  # Sumo todos los valores del vector x\n  sum <- 0\n  for (i in 1:length(x)){\n    sum <- sum + x[i] * pesos[i]\n  }\n  \n  promedio <- sum/length(x)\n  return(promedio)\n}\n```\n\nNotar que se evalúa la condición planteada para el argumento `pesos`. Si no se cumple que la longitud del vector indicado es igual a la longitud del vector en `x`, la función imprime una advertencia. Además, para que la función siga ejecutándose correctamente, definimos `pesos <- rep(1, length(x))`, es decir, el valor por defecto. Este último paso es fundamental, de lo contrario la salida de la función sería impredecible.\n\n```{r}\nvalor_promedio(x = 1:30, pesos = c(0.5, 1, 0.75))\n```\n\nVemos que el promedio es calculado correctamente (con `pesos = rep(1, length(x))`), pero además se imprime una advertencia.\n\nEl uso de las funciones `stop()` y `warning()` en el contexto de funciones no es fundamental, pero adquieren relevancia para funciones que usarán otras personas. Uno nunca sabe con absoluta seguridad el tipo de entrada que un usuario externo usaría en una de nuestras funciones, y uno debe prevenir distintos escenarios. Sin embargo, si a las funciones las usaremos sólo nosotros, contemplar estos escenarios no será vital, por lo que no sería absolutamente necesario el uso de `stop()` o `warning()`.\n\n------------------------------------------------------------------------\n\n## Funciones del tipo *apply*\n\nLas funciones de la familia *apply* se utilizan para aplicar una función determinada a una lista o a un vector. Es útil para realizar un mismo cálculo a un conjunto de elementos dado, evitando utilizar, por ejemplo, un ciclo `for`.\n\nPor ejemplo, imaginemos una lista de 3 elementos, cada elemento un vector numérico:\n\n```{r}\nlista_numeros <- list(sample(1:1000, size = 50),\n                      sample(1:1000, size = 50),\n                      sample(1:1000, size = 50))\nlista_numeros\n```\n\nLa función `sapply()` aplica una función dada a un objeto de tipo `list()`, y devuelve un vector. En este ejemplo, utilizaremos la función recientemente creada (`valor_promedio()`), para calcular el promedio de cada conjunto de números de la lista (indicados en el primer argumento):\n\n```{r}\npromedios <- sapply(lista_numeros, FUN = valor_promedio)\npromedios\n```\n\nNotar que para el argumento `FUN` indicamos el nombre de la función sin los paréntesis, la cual debe existir en el entorno (cargada por el usuario o por defecto en R).\n\nSi quisiéramos indicar otros argumentos para la función `valor_promedio()`, estos pueden definirse luego del argumento `FUN`:\n\n```{r}\npesos_aleatorios <- sample(c(0.5, 0.75, 1), size = 50, replace = TRUE)\npromedios <- sapply(lista_numeros, FUN = valor_promedio, pesos = pesos_aleatorios)\npromedios\n```\n\n**Para pensar:** tal cual como está programada, la función `valor_promedio()` no es útil para ser utilizada con la función `sapply()`, especialmente en cuanto al argumento `pesos`. ¿Por qué?\n\nExisten otras variantes a la función `sapply()`, como por ejemplo `lapply()`, que funciona de manera idéntica pero devuelve una lista en vez de un vector.\n\n## Ejercicios\n\n1.  Cree una función que calcule el área de un triángulo a partir de su base y altura. Contemple el escenario en el que el usuario indique valores no numéricos para los argumentos.\n2.  Cree una función que calcule el error estándar de un conjunto de números. El error estándar se calcula realizando el cociente entre el desvío estándar de la muestra y la raíz cuadrada de la cantidad de números evaluados.\n3.  A partir de la función que calcula el error estándar, utilice la función `sapply()` para calcular el error estándar del conjunto de números `seq(1, 50, 20)`, `c(501, 920, 759, 233)` y `-14:28`.\n\n<br>\n\n<p align=\"center\">\n\n<a href=\"pics/meme_practico_funciones.png\" target=\"_blank\"><img src=\"pics/meme_practico_funciones.png\" style=\"padding: 5px 0 5px 0;width: 40rem;max-width:100%;height:auto;vertical-align:middle;border-style: none;\"/></a>\n\n</p>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"toc-depth":3,"output-file":"7.1_Funciones.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copiar","copy-button-tooltip-success":"Copiado!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"coincidencias","search-copy-link-title":"Copiar link para buscar","search-hide-matches-text":"No mostrar coincidencias adicionales","search-more-match-text":"coincidencia en este documento","search-more-matches-text":"coincidencias más en este documento","search-clear-button-title":"Limpiar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Buscar","search-label":"Buscar","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Cambiar a tema oscuro","toggle-reader-mode":"Cambiar a modo lectura","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","theme":{"light":"cosmo","dark":["cosmo","../cosmo-dark.scss"]},"smooth-scroll":true,"title":"Funciones","pagetitle":"Funciones"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}