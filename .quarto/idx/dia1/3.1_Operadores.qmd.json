{"title":"Objetos y operadores","markdown":{"yaml":{"title":"Objetos y operadores","pagetitle":"Objetos y operadores"},"headingText":"Objetos comunes en R","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\nComo ya vimos anteriormente, R es un lenguaje orientado a objetos y existe una gran variedad de “cosas” que estos objetos pueden contener/almacenar. En general, los objetos que presentamos a continuación permiten realizar la mayoría de las tareas cotidianas en R.\n\n| Objeto | Descripción |\n|----------------------|--------------------------------------------------|\n| vector | Colección de objetos de un mismo tipo (números enteros, números reales, texto, etc.). Los vectores son los objetos básicos a partir de los cuales pueden crearse gran parte del resto de los objetos más relevantes en R. |\n| data.frame | Tabla que contiene datos, conformada por una serie de columnas como vectores. Las columnas de un `data.frame` pueden ser vectores de distinto tipo. Generalmente, estos objetos son cargados por el usuario a partir de un archivo, pero también pueden ser creados con la función `data.frame()`. |\n| matrix | Colección de vectores organizado en filas y columnas. A diferencia de un `data.frame`, es un objeto que permite operaciones matemáticas propias de las matrices (e.g., suma o producto de matrices). |\n| list | Es una coleccion de objetos de cualquier tipo, sean vectores, tablas, matrices, otras listas y más. Gran parte de las salidas de las funciones de R son listas, por ejemplo, la salida de un modelo lineal con la funcion `lm()`. |\n\n## Operadores\n\nUn operador es una expresión, compuesta por uno o más símbolos, que realiza una operación específica sobre uno o más valores para producir un resultado.\n\n### Operadores aritméticos\n\nRelacionan dos números para generar un resultado.\n\n| Símbolo | Operación            |\n|:--------|:---------------------|\n| `+`     | Suma                 |\n| `-`     | Resta                |\n| `*`     | Multiplicación       |\n| `/`     | División             |\n| `^`     | Potenciación         |\n| `%/%`   | División entera      |\n| `%%`    | Resto de la división |\n\nPor ejemplo:\n\n```{r}\n5 + 7\n```\n\n```{r}\n3^4\n```\n\nEl uso de paréntesis muchas veces es necesario:\n\n```{r}\n3^(4+3)\n```\n\n```{r}\n10 %/% 3\n```\n\n```{r}\n10 %% 3\n```\n\n### Operadores relacionales\n\nRelacionan un valor con otro y devuelven una constante lógica (`TRUE` o `FALSE`).\n\n| Símbolo | Operación          |\n|:--------|:-------------------|\n| `<`     | Menor a...         |\n| `<=`    | Menor o igual a..  |\n| `>`     | Mayor a...         |\n| `>=`    | Mayor o igual a... |\n| `==`    | Igual a...         |\n| `!=`    | Distinto de...     |\n\nPor ejemplo:\n\n```{r}\n8 > 9\n```\n\n```{r}\n8 >= 9\n```\n\n```{r}\n5 == 5\n```\n\n```{r}\n12 != 12\n```\n\n### Operadores lógicos o booleanos\n\n::::: {style=\"display: flex; justify-content: space-between; align-items: flex-start;\"}\n::: {style=\"flex: 1; margin-right: 10px;\"}\nEstos operadores devuelven una constante lógica (`TRUE` o `FALSE`).\n\n| Símbolo | Operación        |\n|:--------|:-----------------|\n| `!`     | Negación         |\n| `&`     | Y                |\n| `&&`    | Y secuencial     |\n| `|`     | O                |\n| `||`    | O secuencial     |\n| `xor`   | Unión excluyente |\n:::\n\n::: {style=\"flex: 1; margin-left: 10px; text-align: center;\"}\n<img src=\"pics/george_boole.jpg\" alt=\"Image\" style=\"max-width: 60%; height: auto;\"/>\n\n<p style=\"font-style: italic; font-size: 0.9em; margin-top: 5px;\">\n\nGeorge Boole, matemático inglés. En su honor, los operadores\\\nlógicos también se llaman \"booleanos\".\n\n</p>\n:::\n:::::\n\n<br>\n\nPara entender cómo funcionan estos operadores las [tablas de verdad](https://es.wikipedia.org/wiki/Tabla_de_verdad){target=\"_blank\"} son útiles. Aquí, aprenderemos el comportamiento de estos operadores mediante ejemplos.\n\nEl operador `!` devuelve el resultado opuesto de una expresión lógica dada:\n\n```{r}\n!(10 > 5)\n```\n\nEl operador `&` (Y) combina dos o más expresiones, y devuelve `TRUE` sólo si todas las expresiones lógicas son verdaderas:\n\n```{r}\n(10 > 5) & (30 > 20)\n```\n\nEn cambio, devuelve `FALSE` si alguna de ellas no es verdadera:\n\n```{r}\n(10 > 5) & (30 > 40)\n```\n\nEl operador `|` (O) combina dos o más expresiones, y devuelve `TRUE` si al menos una de las expresiones lógicas son verdaderas:\n\n```{r}\n(10 > 5) | (30 > 40)\n```\n\nEn cambio, devuelve `FALSE` si ninguna de las expresiones son verdaderas:\n\n```{r}\n(10 > 15) | (30 > 40)\n```\n\nEl operador `xor` es en realidad una función con dos argumentos. Sólo devuelve `TRUE` cuando una condición es verdadera y la otra es falsa:\n\n```{r}\nxor(10 > 5, 30 > 40)\n```\n\nEn cambio, devuelve `FALSE` cuando ambas expresiones son verdaderas:\n\n```{r}\nxor(10 > 5, 30 > 20)\n```\n\nO ambas son falsas:\n\n```{r}\nxor(10 > 15, 30 > 40)\n```\n\nLos operadores `&&` y `||` trabajan secuencialmente, sólo evalúan la segunda condición si la primera es `TRUE`. Si la primera condición ya es `FALSE`, no se evalúa la segunda condición. Adquieren mayor sentido cuando el segundo elemento de la comparación no está definido, y suele utilizarse en contextos de programación más avanzada. Por ejemplo:\n\n```{r}\na <- 5\na < 3 && b > 10\n```\n\nAquí vemos que el objeto `b` no existe en el ambiente de R. Sin embargo, el resultado es `FALSE` porque la primera condición ya es falsa. Si hiciéramos la misma comparación con `&`, R devuelve un error:\n\n```{r error=TRUE}\na <- 5\na < 3 & b > 10\n```\n\nVeamos un ejemplo similar con el operador `||`:\n\n```{r}\na <- 5\na > 3 || b > 10\n```\n\nEl resultado es `TRUE`, porque la primera condición ya es verdadera. El mismo código con `|` arroja un error:\n\n```{r error=TRUE}\na <- 5\na > 3 | b > 10\n```\n\nLas funciones `all()` y `any()` permiten evaluar más de una condición simultáneamente. La función `all()` devuelve `TRUE` si todas las condiciones indicadas son verdaderas, caso contrario devuelve `FALSE`. Su comportamiento es análogo al operador `&` utilizado secuencialmente. Las condiciones se escriben de a una y separadas por coma. Por ejemplo:\n\n```{r}\na <- 5\nb <- 10\nc <- 15\nall(a > 3, b > 8, c > 11)\n```\n\nTodas las condiciones son verdaderas, por lo que devuelve `TRUE`. Si en cambio al menos una es falsa, obtenemos `FALSE`:\n\n```{r}\nall(a > 3, b > 8, c > 21)\n```\n\nLa función `any()` devuelve `TRUE` si al menos una condición es verdadera. Su comportamiento es análogo al operador `|` utilizado de manera secuencial. Por ejemplo:\n\n```{r}\nany(a > 7, b > 12, c > 13)\n```\n\nEn cambio, si todas las condiciones son falsas, `any()` devuelve `FALSE`:\n\n```{r}\nany(a > 7, b > 12, c > 23)\n```\n\n## Ejercicios\n\n1.  La variable `y` puede calcularse mediante la siguiente fórmula:\n\n$$ \\hspace{-9cm} y = a + b\\sqrt{x+2} + cx^2 $$\n\nSiendo `a = 5.3`, `b = 3.2` y `c = 1.7`, calcule el valor de `y` cuando `x = 20`.\n\n2.  Sin correr las siguientes líneas, ¿cuál es el resultado de cada expresión?\n\n```{r results='hide'}\nx <- 10\ny <- 90\n\n(x <= 10) & (y > 40)\n(x == 10) | (y == 89)\n((x > 5) & (y != 70)) & (x*y > 1000)\n```\n\n3.  ¿Qué hacen las funciones `round()`, `floor()`, `ceiling()` y `trunc()`?\n\n```{r results='hide'}\nround(x = 6.756)\nround(6.756, digits = 2)\ntrunc(6.756)\nceiling(6.356)\nfloor(x = 6.756)\n```\n\n<br>\n\n<p align=\"center\">\n\n<a href=\"pics/meme_practico_operadores.png\" target=\"_blank\"><img src=\"pics/meme_practico_operadores.png\" style=\"padding: 5px 0 5px 0;width: 50rem;max-width:100%;height:auto;vertical-align:middle;border-style: none;\"/></a>\n\n</p>\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Objetos comunes en R\n\nComo ya vimos anteriormente, R es un lenguaje orientado a objetos y existe una gran variedad de “cosas” que estos objetos pueden contener/almacenar. En general, los objetos que presentamos a continuación permiten realizar la mayoría de las tareas cotidianas en R.\n\n| Objeto | Descripción |\n|----------------------|--------------------------------------------------|\n| vector | Colección de objetos de un mismo tipo (números enteros, números reales, texto, etc.). Los vectores son los objetos básicos a partir de los cuales pueden crearse gran parte del resto de los objetos más relevantes en R. |\n| data.frame | Tabla que contiene datos, conformada por una serie de columnas como vectores. Las columnas de un `data.frame` pueden ser vectores de distinto tipo. Generalmente, estos objetos son cargados por el usuario a partir de un archivo, pero también pueden ser creados con la función `data.frame()`. |\n| matrix | Colección de vectores organizado en filas y columnas. A diferencia de un `data.frame`, es un objeto que permite operaciones matemáticas propias de las matrices (e.g., suma o producto de matrices). |\n| list | Es una coleccion de objetos de cualquier tipo, sean vectores, tablas, matrices, otras listas y más. Gran parte de las salidas de las funciones de R son listas, por ejemplo, la salida de un modelo lineal con la funcion `lm()`. |\n\n## Operadores\n\nUn operador es una expresión, compuesta por uno o más símbolos, que realiza una operación específica sobre uno o más valores para producir un resultado.\n\n### Operadores aritméticos\n\nRelacionan dos números para generar un resultado.\n\n| Símbolo | Operación            |\n|:--------|:---------------------|\n| `+`     | Suma                 |\n| `-`     | Resta                |\n| `*`     | Multiplicación       |\n| `/`     | División             |\n| `^`     | Potenciación         |\n| `%/%`   | División entera      |\n| `%%`    | Resto de la división |\n\nPor ejemplo:\n\n```{r}\n5 + 7\n```\n\n```{r}\n3^4\n```\n\nEl uso de paréntesis muchas veces es necesario:\n\n```{r}\n3^(4+3)\n```\n\n```{r}\n10 %/% 3\n```\n\n```{r}\n10 %% 3\n```\n\n### Operadores relacionales\n\nRelacionan un valor con otro y devuelven una constante lógica (`TRUE` o `FALSE`).\n\n| Símbolo | Operación          |\n|:--------|:-------------------|\n| `<`     | Menor a...         |\n| `<=`    | Menor o igual a..  |\n| `>`     | Mayor a...         |\n| `>=`    | Mayor o igual a... |\n| `==`    | Igual a...         |\n| `!=`    | Distinto de...     |\n\nPor ejemplo:\n\n```{r}\n8 > 9\n```\n\n```{r}\n8 >= 9\n```\n\n```{r}\n5 == 5\n```\n\n```{r}\n12 != 12\n```\n\n### Operadores lógicos o booleanos\n\n::::: {style=\"display: flex; justify-content: space-between; align-items: flex-start;\"}\n::: {style=\"flex: 1; margin-right: 10px;\"}\nEstos operadores devuelven una constante lógica (`TRUE` o `FALSE`).\n\n| Símbolo | Operación        |\n|:--------|:-----------------|\n| `!`     | Negación         |\n| `&`     | Y                |\n| `&&`    | Y secuencial     |\n| `|`     | O                |\n| `||`    | O secuencial     |\n| `xor`   | Unión excluyente |\n:::\n\n::: {style=\"flex: 1; margin-left: 10px; text-align: center;\"}\n<img src=\"pics/george_boole.jpg\" alt=\"Image\" style=\"max-width: 60%; height: auto;\"/>\n\n<p style=\"font-style: italic; font-size: 0.9em; margin-top: 5px;\">\n\nGeorge Boole, matemático inglés. En su honor, los operadores\\\nlógicos también se llaman \"booleanos\".\n\n</p>\n:::\n:::::\n\n<br>\n\nPara entender cómo funcionan estos operadores las [tablas de verdad](https://es.wikipedia.org/wiki/Tabla_de_verdad){target=\"_blank\"} son útiles. Aquí, aprenderemos el comportamiento de estos operadores mediante ejemplos.\n\nEl operador `!` devuelve el resultado opuesto de una expresión lógica dada:\n\n```{r}\n!(10 > 5)\n```\n\nEl operador `&` (Y) combina dos o más expresiones, y devuelve `TRUE` sólo si todas las expresiones lógicas son verdaderas:\n\n```{r}\n(10 > 5) & (30 > 20)\n```\n\nEn cambio, devuelve `FALSE` si alguna de ellas no es verdadera:\n\n```{r}\n(10 > 5) & (30 > 40)\n```\n\nEl operador `|` (O) combina dos o más expresiones, y devuelve `TRUE` si al menos una de las expresiones lógicas son verdaderas:\n\n```{r}\n(10 > 5) | (30 > 40)\n```\n\nEn cambio, devuelve `FALSE` si ninguna de las expresiones son verdaderas:\n\n```{r}\n(10 > 15) | (30 > 40)\n```\n\nEl operador `xor` es en realidad una función con dos argumentos. Sólo devuelve `TRUE` cuando una condición es verdadera y la otra es falsa:\n\n```{r}\nxor(10 > 5, 30 > 40)\n```\n\nEn cambio, devuelve `FALSE` cuando ambas expresiones son verdaderas:\n\n```{r}\nxor(10 > 5, 30 > 20)\n```\n\nO ambas son falsas:\n\n```{r}\nxor(10 > 15, 30 > 40)\n```\n\nLos operadores `&&` y `||` trabajan secuencialmente, sólo evalúan la segunda condición si la primera es `TRUE`. Si la primera condición ya es `FALSE`, no se evalúa la segunda condición. Adquieren mayor sentido cuando el segundo elemento de la comparación no está definido, y suele utilizarse en contextos de programación más avanzada. Por ejemplo:\n\n```{r}\na <- 5\na < 3 && b > 10\n```\n\nAquí vemos que el objeto `b` no existe en el ambiente de R. Sin embargo, el resultado es `FALSE` porque la primera condición ya es falsa. Si hiciéramos la misma comparación con `&`, R devuelve un error:\n\n```{r error=TRUE}\na <- 5\na < 3 & b > 10\n```\n\nVeamos un ejemplo similar con el operador `||`:\n\n```{r}\na <- 5\na > 3 || b > 10\n```\n\nEl resultado es `TRUE`, porque la primera condición ya es verdadera. El mismo código con `|` arroja un error:\n\n```{r error=TRUE}\na <- 5\na > 3 | b > 10\n```\n\nLas funciones `all()` y `any()` permiten evaluar más de una condición simultáneamente. La función `all()` devuelve `TRUE` si todas las condiciones indicadas son verdaderas, caso contrario devuelve `FALSE`. Su comportamiento es análogo al operador `&` utilizado secuencialmente. Las condiciones se escriben de a una y separadas por coma. Por ejemplo:\n\n```{r}\na <- 5\nb <- 10\nc <- 15\nall(a > 3, b > 8, c > 11)\n```\n\nTodas las condiciones son verdaderas, por lo que devuelve `TRUE`. Si en cambio al menos una es falsa, obtenemos `FALSE`:\n\n```{r}\nall(a > 3, b > 8, c > 21)\n```\n\nLa función `any()` devuelve `TRUE` si al menos una condición es verdadera. Su comportamiento es análogo al operador `|` utilizado de manera secuencial. Por ejemplo:\n\n```{r}\nany(a > 7, b > 12, c > 13)\n```\n\nEn cambio, si todas las condiciones son falsas, `any()` devuelve `FALSE`:\n\n```{r}\nany(a > 7, b > 12, c > 23)\n```\n\n## Ejercicios\n\n1.  La variable `y` puede calcularse mediante la siguiente fórmula:\n\n$$ \\hspace{-9cm} y = a + b\\sqrt{x+2} + cx^2 $$\n\nSiendo `a = 5.3`, `b = 3.2` y `c = 1.7`, calcule el valor de `y` cuando `x = 20`.\n\n2.  Sin correr las siguientes líneas, ¿cuál es el resultado de cada expresión?\n\n```{r results='hide'}\nx <- 10\ny <- 90\n\n(x <= 10) & (y > 40)\n(x == 10) | (y == 89)\n((x > 5) & (y != 70)) & (x*y > 1000)\n```\n\n3.  ¿Qué hacen las funciones `round()`, `floor()`, `ceiling()` y `trunc()`?\n\n```{r results='hide'}\nround(x = 6.756)\nround(6.756, digits = 2)\ntrunc(6.756)\nceiling(6.356)\nfloor(x = 6.756)\n```\n\n<br>\n\n<p align=\"center\">\n\n<a href=\"pics/meme_practico_operadores.png\" target=\"_blank\"><img src=\"pics/meme_practico_operadores.png\" style=\"padding: 5px 0 5px 0;width: 50rem;max-width:100%;height:auto;vertical-align:middle;border-style: none;\"/></a>\n\n</p>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"toc-depth":3,"output-file":"3.1_Operadores.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copiar","copy-button-tooltip-success":"Copiado!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"coincidencias","search-copy-link-title":"Copiar link para buscar","search-hide-matches-text":"No mostrar coincidencias adicionales","search-more-match-text":"coincidencia en este documento","search-more-matches-text":"coincidencias más en este documento","search-clear-button-title":"Limpiar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Buscar","search-label":"Buscar","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Cambiar a tema oscuro","toggle-reader-mode":"Cambiar a modo lectura","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","theme":{"light":"cosmo","dark":["cosmo","../cosmo-dark.scss"]},"smooth-scroll":true,"title":"Objetos y operadores","pagetitle":"Objetos y operadores"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}