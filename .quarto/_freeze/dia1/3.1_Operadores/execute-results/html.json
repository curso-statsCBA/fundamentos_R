{
  "hash": "0a743f760f28674f85cf659b7f15ff44",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Objetos y operadores\"\npagetitle: \"Objetos y operadores\"\n---\n\n\n\n\n\n\n## Objetos comunes en R\n\nComo ya vimos anteriormente, R es un lenguaje orientado a objetos y existe una gran variedad de “cosas” que estos objetos pueden contener/almacenar. En general, los objetos que presentamos a continuación permiten realizar la mayoría de las tareas cotidianas en R.\n\n| Objeto | Descripción |\n|----------------------|--------------------------------------------------|\n| vector | Colección de objetos de un mismo tipo (números enteros, números reales, texto, etc.). Los vectores son los objetos básicos a partir de los cuales pueden crearse gran parte del resto de los objetos más relevantes en R. |\n| data.frame | Tabla que contiene datos, conformada por una serie de columnas como vectores. Las columnas de un `data.frame` pueden ser vectores de distinto tipo. Generalmente, estos objetos son cargados por el usuario a partir de un archivo, pero también pueden ser creados con la función `data.frame()`. |\n| matrix | Colección de vectores organizado en filas y columnas. A diferencia de un `data.frame`, es un objeto que permite operaciones matemáticas propias de las matrices (e.g., suma o producto de matrices). |\n| list | Es una coleccion de objetos de cualquier tipo, sean vectores, tablas, matrices, otras listas y más. Gran parte de las salidas de las funciones de R son listas, por ejemplo, la salida de un modelo lineal con la funcion `lm()`. |\n\n## Operadores\n\nUn operador es una expresión, compuesta por uno o más símbolos, que realiza una operación específica sobre uno o más valores para producir un resultado.\n\n### Operadores aritméticos\n\nRelacionan dos números para generar un resultado.\n\n| Símbolo | Operación            |\n|:--------|:---------------------|\n| `+`     | Suma                 |\n| `-`     | Resta                |\n| `*`     | Multiplicación       |\n| `/`     | División             |\n| `^`     | Potenciación         |\n| `%/%`   | División entera      |\n| `%%`    | Resto de la división |\n\nPor ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n3^4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 81\n```\n\n\n:::\n:::\n\n\n\n\nEl uso de paréntesis muchas veces es necesario:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3^(4+3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2187\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n10 %/% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n10 %% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n### Operadores relacionales\n\nRelacionan un valor con otro y devuelven una constante lógica (`TRUE` o `FALSE`).\n\n| Símbolo | Operación          |\n|:--------|:-------------------|\n| `<`     | Menor a...         |\n| `<=`    | Menor o igual a..  |\n| `>`     | Mayor a...         |\n| `>=`    | Mayor o igual a... |\n| `==`    | Igual a...         |\n| `!=`    | Distinto de...     |\n\nPor ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n8 > 9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n8 >= 9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n5 == 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n12 != 12\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n### Operadores lógicos o booleanos\n\n::::: {style=\"display: flex; justify-content: space-between; align-items: flex-start;\"}\n::: {style=\"flex: 1; margin-right: 10px;\"}\nEstos operadores devuelven una constante lógica (`TRUE` o `FALSE`).\n\n| Símbolo | Operación        |\n|:--------|:-----------------|\n| `!`     | Negación         |\n| `&`     | Y                |\n| `&&`    | Y secuencial     |\n| `|`     | O                |\n| `||`    | O secuencial     |\n| `xor`   | Unión excluyente |\n:::\n\n::: {style=\"flex: 1; margin-left: 10px; text-align: center;\"}\n<img src=\"pics/george_boole.jpg\" alt=\"Image\" style=\"max-width: 60%; height: auto;\"/>\n\n<p style=\"font-style: italic; font-size: 0.9em; margin-top: 5px;\">\n\nGeorge Boole, matemático inglés. En su honor, los operadores\\\nlógicos también se llaman \"booleanos\".\n\n</p>\n:::\n:::::\n\n<br>\n\nPara entender cómo funcionan estos operadores las [tablas de verdad](https://es.wikipedia.org/wiki/Tabla_de_verdad){target=\"_blank\"} son útiles. Aquí, aprenderemos el comportamiento de estos operadores mediante ejemplos.\n\nEl operador `!` devuelve el resultado opuesto de una expresión lógica dada:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!(10 > 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nEl operador `&` (Y) combina dos o más expresiones, y devuelve `TRUE` sólo si todas las expresiones lógicas son verdaderas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(10 > 5) & (30 > 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nEn cambio, devuelve `FALSE` si alguna de ellas no es verdadera:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(10 > 5) & (30 > 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nEl operador `|` (O) combina dos o más expresiones, y devuelve `TRUE` si al menos una de las expresiones lógicas son verdaderas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(10 > 5) | (30 > 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nEn cambio, devuelve `FALSE` si ninguna de las expresiones son verdaderas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(10 > 15) | (30 > 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nEl operador `xor` es en realidad una función con dos argumentos. Sólo devuelve `TRUE` cuando una condición es verdadera y la otra es falsa:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxor(10 > 5, 30 > 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nEn cambio, devuelve `FALSE` cuando ambas expresiones son verdaderas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxor(10 > 5, 30 > 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nO ambas son falsas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxor(10 > 15, 30 > 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nLos operadores `&&` y `||` trabajan secuencialmente, sólo evalúan la segunda condición si la primera es `TRUE`. Si la primera condición ya es `FALSE`, no se evalúa la segunda condición. Adquieren mayor sentido cuando el segundo elemento de la comparación no está definido, y suele utilizarse en contextos de programación más avanzada. Por ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\na < 3 && b > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nAquí vemos que el objeto `b` no existe en el ambiente de R. Sin embargo, el resultado es `FALSE` porque la primera condición ya es falsa. Si hiciéramos la misma comparación con `&`, R devuelve un error:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\na < 3 & b > 10\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: objeto 'b' no encontrado\n```\n\n\n:::\n:::\n\n\n\n\nVeamos un ejemplo similar con el operador `||`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\na > 3 || b > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nEl resultado es `TRUE`, porque la primera condición ya es verdadera. El mismo código con `|` arroja un error:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\na > 3 | b > 10\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: objeto 'b' no encontrado\n```\n\n\n:::\n:::\n\n\n\n\nLas funciones `all()` y `any()` permiten evaluar más de una condición simultáneamente. La función `all()` devuelve `TRUE` si todas las condiciones indicadas son verdaderas, caso contrario devuelve `FALSE`. Su comportamiento es análogo al operador `&` utilizado secuencialmente. Las condiciones se escriben de a una y separadas por coma. Por ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\nb <- 10\nc <- 15\nall(a > 3, b > 8, c > 11)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nTodas las condiciones son verdaderas, por lo que devuelve `TRUE`. Si en cambio al menos una es falsa, obtenemos `FALSE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall(a > 3, b > 8, c > 21)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nLa función `any()` devuelve `TRUE` si al menos una condición es verdadera. Su comportamiento es análogo al operador `|` utilizado de manera secuencial. Por ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(a > 7, b > 12, c > 13)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nEn cambio, si todas las condiciones son falsas, `any()` devuelve `FALSE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(a > 7, b > 12, c > 23)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n## Ejercicios\n\n1.  La variable `y` puede calcularse mediante la siguiente fórmula:\n\n$$ \\hspace{-9cm} y = a + b\\sqrt{x+2} + cx^2 $$\n\nSiendo `a = 5.3`, `b = 3.2` y `c = 1.7`, calcule el valor de `y` cuando `x = 20`.\n\n2.  Sin correr las siguientes líneas, ¿cuál es el resultado de cada expresión?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\ny <- 90\n\n(x <= 10) & (y > 40)\n(x == 10) | (y == 89)\n((x > 5) & (y != 70)) & (x*y > 1000)\n```\n:::\n\n\n\n\n3.  ¿Qué hacen las funciones `round()`, `floor()`, `ceiling()` y `trunc()`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(x = 6.756)\nround(6.756, digits = 2)\ntrunc(6.756)\nceiling(6.356)\nfloor(x = 6.756)\n```\n:::\n\n\n\n\n<br>\n\n<p align=\"center\">\n\n<a href=\"pics/meme_practico_operadores.png\" target=\"_blank\"><img src=\"pics/meme_practico_operadores.png\" style=\"padding: 5px 0 5px 0;width: 50rem;max-width:100%;height:auto;vertical-align:middle;border-style: none;\"/></a>\n\n</p>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}