{
  "hash": "764208bfbd89576bbc4fe1fff82f3c05",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Vectores\"\npagetitle: \"Vectores\"\n---\n\n\n\n\n\n\n## Creación de vectores\n\nEn R, un vector es una colección ordenada de objetos de un mismo tipo o *clase*. Aprender sobre la creación y manipulación de vectores es un paso fundamental para comprender la manipulación de objetos más complejos, por ejemplo, las tablas y las matrices. Esto se debe a que estos objetos son justamente una colección de vectores.\n\nLa forma más simple de crear un vector es mediante la función genérica `c()`, que simplemente combina los elementos indicados entre comas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1, 2, 3)\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\nEs posible asignarles un nombre a cada elemento, lo cual puede ser útil en algunos contextos:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(a = 1, b = 2, c = 3)\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\na b c \n1 2 3 \n```\n\n\n:::\n:::\n\n\n\n\nSi quisiéramos averiguar qué clase de elementos contiene el vector, utilizamos la función `class()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\nEn general, podemos utilizar la función `str()` para conocer la estructura (**str**ucture) de cualquier objeto de R, incluyendo vectores:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Named num [1:3] 1 2 3\n - attr(*, \"names\")= chr [1:3] \"a\" \"b\" \"c\"\n```\n\n\n:::\n:::\n\n\n\n\nUn vector puede componerse de cinco clases principales de elementos:\n\n|  |  |\n|-----------------------|------------------------------------------------|\n| numeric | Contienen números reales (decimales). Por ejemplo: `c(1.2, 1.5, 1.7)`. |\n| integer | Contienen números enteros. Debemos indicarse con la letra `L` luego del número. Por ejemplo: `c(1L, -5L, 16L, 17L)`. |\n| logical | Contienen valores booleanos o lógicos. Por ejemplo: `c(TRUE, FALSE, NA)` o `c(T, F, T)`. |\n| character | Contienen texto, el cual debe explicitarse con comillas simples o dobles. Por ejemplo: `c(\"Algarrobo\", \"Quebracho\", \"Espinillo\")`. |\n| NULL | Representa un vector vacío. Se genera al crear el vector: `vec <- NULL`. |\n\nRecordemos que al crear un vector, este puede componerse de un solo tipo de elementos. Por ello, debemos tener cuidado a la hora de generar nuestros vectores, y asegurarnos de que estamos generando un vector con elementos de la clase deseada. El uso de vectores con elementos de una clase incorrecta es un error muy común en distintos contextos del flujo de trabajo. Por ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1985, \"Algarrobo\", \"Quebracho\")\nclass(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\nObservamos que el vector generado es de clase `character`. A la hora de forzar una clase para los elementos de un vector, R asigna prioridad a ciertas clases sobre otras. Si bien es posible correr líneas de código como la anterior, en general no sería una buena práctica hacerlo. Mejor ser explícito!\n\n### El vector como factor\n\nOtra clase importante para los elementos de un vector es `factor`. Sirve para definir un factor categórico, compuesto por niveles (los elementos *distintos y únicos* del vector), los cuales siguen un orden específico:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies <- c(\"Algarrobo\", \"Quebracho\", \"Espinillo\")\nespecies <- factor(especies)\nespecies\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Algarrobo Quebracho Espinillo\nLevels: Algarrobo Espinillo Quebracho\n```\n\n\n:::\n:::\n\n\n\n\nEs posible cambiar el orden de los niveles, definiendo al factor con el argumento `levels`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies <- factor(especies, levels = c(\"Quebracho\", \"Espinillo\", \"Algarrobo\"))\nespecies\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Algarrobo Quebracho Espinillo\nLevels: Quebracho Espinillo Algarrobo\n```\n\n\n:::\n:::\n\n\n\n\n### Funciones útiles para la creación de vectores\n\nDurante nuestro trabajo, puede ser útil la creación de vectores que sigan una lógica determinada. Si queremos generar una secuencia de números enteros con incremento de a una unidad, el operador de secuencia `:` es el indicado, siguiendo la lógica \"desde:hasta\":\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuc <- 5:30\nsuc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n[26] 30\n```\n\n\n:::\n:::\n\n\n\n\nPara generar vectores con una lógica más compleja, las funciones `seq()` y `rep()` son adecuadas. La función `seq()` genera un sucesión de números (i.e. un vector de clase `numeric` o `integer`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 10, by = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n\n\n\nLos argumentos `from` y `to` determinan respectivamente los valores mínimos y máximos de la secuencia, mientras que el argumento `by` determina el incremento de la secuencia. Otra forma de generar el mismo vector del ejemplo sería:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, by = 2, length.out = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n\n\n\nEl argumento `length.out` determina el número máximo de elementos que contendrá el vector.\n\nAl correr la función con un único número, obtenemos una sucesión de números enteros, comenzando desde el 1:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n\n\nLa función `rep()` genera un nuevo vector a partir de la repetición de los elementos de un vector dado:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies <- c(\"Algarrobo\", \"Quebracho\", \"Espinillo\")\nvec_sp <- rep(x = especies, times = 2)\nvec_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Algarrobo\" \"Quebracho\" \"Espinillo\" \"Algarrobo\" \"Quebracho\" \"Espinillo\"\n```\n\n\n:::\n:::\n\n\n\n\nEl argumento `x` recibe un vector dado, mientras que el argumento `times` indica la cantidad de veces que debe repetirse el vector dado. Otro argumento relevante de la función `rep()` es el argumento `each`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_sp <- rep(x = especies, each = 3)\nvec_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Algarrobo\" \"Algarrobo\" \"Algarrobo\" \"Quebracho\" \"Quebracho\" \"Quebracho\"\n[7] \"Espinillo\" \"Espinillo\" \"Espinillo\"\n```\n\n\n:::\n:::\n\n\n\n\nAquí, `each = 3` indica que cada elemento del vector en `x` debe repetirse 3 veces.\n\n### Otras funciones útiles\n\nAdemás de las expuestas, existen numerosas funciones nativas de R para generar vectores. Entre ellas, podemos mencionar a `sample()`, la cual genera un vector con un subconjunto aleatorio de elementos a partir un vector dado; `runif()` y `rnorm()`, los cuales generan vectores de elementos provenientes de una distribución uniforme o normal, respectivamente. Por otro lado, las funciones `letters()` y `LETTERS()` generan vectores de letras en minúscula o mayúscula.\n\n#### <ins>Ejercicio 1</ins>\n\nDado el vector `rep(x = 3:1, each = 5)`, explore qué hacen las siguientes funciones: `length()`, `sort()`, `rev()` y `unique()`.\n\n## Vectores y expresiones lógicas\n\nAhora que aprendimos cómo generar un vector, veremos cómo se evalúan las expresiones lógicas en este contexto. Por ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 == 1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\n\nAquí, evaluamos si cada elemento del vector `1:10` es igual al número 3, indicando `TRUE` en dicho caso. En cambio, utilizando `!=` obtenemos como resultado lo opuesto:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 != 1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n\n\nObviamente, los operadores relaciones también son válidos:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 >= 1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\n\nEn el contexto de vectores, es muy útil el operador lógico `%in%`. Este operador devuelve `TRUE` para cada elemento a la izquierda, sólo si dicho elemento es encontrado en el vector indicado a la derecha del operador. Caso contrario, devuelve `FALSE`. Por ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 %in% 1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nTambién es posible indicar más de un elemento a la izquierda del operador:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3) %in% 1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\n\n\nPor otro lado, las funciones `all()` y `any()` son muy utilizadas a la hora de evaluar vectores lógicos. Anteriormente, vimos que estas funciones sirven para evaluar varias condiciones al mismo tiempo, separadas por una coma. No obstante, también es posible indicarle directamente un vector lógico. En el contexto de vectores, la función `all()` devuelve `TRUE` si todos los elementos del vector lógico son `TRUE`, caso contrario devuelve `FALSE`. Por ejemplo\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncond <- 11 > 1:10\nall(cond)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nEn cambio, con solo haber un sólo elemento igual a `FALSE`, la función `all()` devuelve `FALSE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncond <- 10 > 1:10\nall(cond)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nLa función `any()`, devuelve `TRUE` si al menos un elemento del vector lógico es `TRUE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncond <- 10 <= 1:10\nany(cond)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nCaso contrario, si todos los elementos son iguales a `FALSE`, `any()` devuelve `FALSE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncond <- 15 < 1:10\nany(cond)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nFinalmente, es útil aclarar que en el contexto de operaciones aritméticas, `TRUE` equivale a `1` y `FALSE` equivale a `0`. Por ejemplo, sea la siguiente condición:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncond <- 5 >= 1:10\ncond\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\n\nSi sumamos los elementos del vector lógico, obtenemos lo siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(cond)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n¿De qué sirve conocer esto? Quizás no le veamos utilidad ahora mismo, pero puede llegar a ser útil en el contexto de un trabajo más avanzado (por ejemplo, en el contexto de manipulación de tablas).\n\n## Manipulación de vectores\n\nUn apartado fundamental para aprender a programar en R es la manipulación de vectores. En pocas palabras, nos referimos a generar un nuevo vector a partir de uno creado previamente, de manera tal que sirva para realizar una tarea específica. Este tipo de tareas será de gran utilidad a la hora de trabajar con tablas.\n\nDado un vector, interesa averiguar su contenido, lo cual lo podemos hacer simplemente imprimiendo el vector en la consola, o rescatando uno o más elementos a través de sus índices:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- seq(from = -5, to = 5, by = 0.25)\nvec[15]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.5\n```\n\n\n:::\n\n```{.r .cell-code}\nvec[c(1, 5, 10)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -5.00 -4.00 -2.75\n```\n\n\n:::\n\n```{.r .cell-code}\nvec[13:18]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.00 -1.75 -1.50 -1.25 -1.00 -0.75\n```\n\n\n:::\n:::\n\n\n\n\nLos corchetes `[]` indican que se seleccionará un subconjunto de elementos del vector. En la segunda línea del ejemplo, seleccionamos el elemento de índice 15. En la tercera línea de código, seleccionamos los elementos de índice 1, 5 y 10. En la cuarta línea de código, en cambio, seleccionamos los elementos 13 al 18 (i.e. índices).\n\nEs posible excluir elementos con el símbolo `-`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies <- c(\"Algarrobo\", \"Quebracho\", \"Espinillo\")\nespecies_sub <- especies[-2]\nespecies_sub\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Algarrobo\" \"Espinillo\"\n```\n\n\n:::\n:::\n\n\n\n\nAdemás de la posibilidad de indicar índices, es posible utilizar un vector lógico. Dicho vector puede generarse definiendo condiciones que los elementos deben cumplir.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncond1 <- vec > -2 & vec < 2\ncond1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[25]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nvec_sub <- vec[cond1]\n```\n:::\n\n\n\n\nAquí, el objeto \"cond1\" es un vector lógico, indicando `TRUE` o `FALSE` para cada elemento del vector \"vec\", según la condición expuesta: que el número sea mayor a -2 (`vec > -2`) y (`&`) menor a 2 (`vec < 2`). Notar que hay que ser explícito a la hora de definir la condición. Es útil indicar la condición directamente, sin necesidad de crear un objeto nuevo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_sub <- vec[vec > -2 & vec < 2]\nvec_sub\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -1.75 -1.50 -1.25 -1.00 -0.75 -0.50 -0.25  0.00  0.25  0.50  0.75  1.00\n[13]  1.25  1.50  1.75\n```\n\n\n:::\n:::\n\n\n\n\nLa función `subset()` permite hacer la misma operación de filtrado, indicando el vector a filtrar, y la condición:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_sub <- subset(vec, vec > -2 & vec < 2)\nvec_sub\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -1.75 -1.50 -1.25 -1.00 -0.75 -0.50 -0.25  0.00  0.25  0.50  0.75  1.00\n[13]  1.25  1.50  1.75\n```\n\n\n:::\n:::\n\n\n\n\nLa función `which()` devuelve los índices de los elementos de un vector que cumplen con una condición dada:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(vec > -2 & vec < 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n```\n\n\n:::\n:::\n\n\n\n\n**Para pensar:** Sin correr la expresión, ¿qué pasa si la condición que definimos es `!(vec > -2 & vec < 2)`?\n\nUna vez seleccionado el subconjunto de elementos de un vector, es posible asignarle un valor diferente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[vec <= 0] <- 0\n```\n:::\n\n\n\n\nAquí, seleccionamos los valores menores o iguales a 0, y les asignamos el valor 0. Notar que en este caso, al ser un único valor de reemplazo, no es necesario repetir el 0 tantas veces como valores a reemplazar.\n\nA veces, resulta útil reemplazar los valores `NA` (no dato) por algún otro valor útil, para lo cual podemos utilizar la función `is.na()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(5, 8, 16, NA, 3)\nvec[is.na(vec)] <- 0\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5  8 16  0  3\n```\n\n\n:::\n:::\n\n\n\n\nEn el contexto de valores `NA`, es útil la función `na.omit()`, que remuevo todos los elementos que sean `NA`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(5, 8, 16, NA, 3, 8, NA)\nvec2 <- na.omit(vec)\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5  8 16  3  8\nattr(,\"na.action\")\n[1] 4 7\nattr(,\"class\")\n[1] \"omit\"\n```\n\n\n:::\n:::\n\n\n\n\nA la hora de efectuar subconjuntos de vectores, es importante diferenciar el uso del operador `==` del `%in%`, que ya introdujimos anteriormente. Al utilizar el operador `==` nos preguntamos si cada elemento del vector indicado a la izquierda del operador es igual al elemento (o a los elementos) indicado a la derecha; y utilizamos la expresión lógica resultante para hacer el subset del vector:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies <- rep(c(\"Algarrobo\", \"Molle\", \"Quebracho\", \"Piquillin\"), each = 5)\nespecies[especies == \"Quebracho\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Quebracho\" \"Quebracho\" \"Quebracho\" \"Quebracho\" \"Quebracho\"\n```\n\n\n:::\n:::\n\n\n\n\n¿Cómo procedemos si, por ejemplo, quisiéramos seleccionar más de una especie? El operador `==` ya no es útil por sí solo. Una opción es la siguiente:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies[especies == \"Molle\" | especies == \"Piquillin\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Molle\"     \"Molle\"     \"Molle\"     \"Molle\"     \"Molle\"     \"Piquillin\"\n [7] \"Piquillin\" \"Piquillin\" \"Piquillin\" \"Piquillin\"\n```\n\n\n:::\n:::\n\n\n\n\nOtra forma de hacerlo es utilizar el operador `%in%`. Recordemos que este operador indica `TRUE` o `FALSE` si cada elemento del vector a la izquierda *está contenido* en el vector indicado a la derecha:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies[especies %in% c(\"Molle\", \"Piquillin\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Molle\"     \"Molle\"     \"Molle\"     \"Molle\"     \"Molle\"     \"Piquillin\"\n [7] \"Piquillin\" \"Piquillin\" \"Piquillin\" \"Piquillin\"\n```\n\n\n:::\n:::\n\n\n\n\nComo veremos más adelante, el operador `%in%` es muy útil en el contexto de manipulación de tablas.\n\nEs posible añadir elementos a un vector con la función `c()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nespecies <- c(\"Algarrobo\", \"Quebracho\", \"Espinillo\")\nespecies <- c(especies, \"Yuchan\", \"Tusca\")\nespecies\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Algarrobo\" \"Quebracho\" \"Espinillo\" \"Yuchan\"    \"Tusca\"    \n```\n\n\n:::\n:::\n\n\n\n\n**Para explorar:** La función `append()` es una forma de general de hacer esto. Explore `?append`.\n\n## Funciones básicas para vectores numéricos\n\nAnteriormente, hemos visto cómo trabajan las funciones `round()`, `ceiling()`, `floor()` and `trunc()` con números sueltos. Sin embargo, estas funciones, al igual que muchas otras funciones nativas de R, son *funciones vectorizadas*. Esto significa que pueden trabajar sobre un vector, y arrojar un resultado para cada uno de los elementos del vector.\n\nPor ejemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1.233, 1.924, 0.46)\nround(vec, digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.2 1.9 0.5\n```\n\n\n:::\n:::\n\n\n\n\nR también provee de numerosas funciones nativas para obtener medidas de resumen. Podemos mencionar a `mean()` para calcular el promedio, `median()` para calcular la mediana y `sd()` para calcular el desvío estándar.\n\n#### <ins>Ejercicio final</ins>\n\n1.  Utilice las funciones `rep()` y `seq()` para generar los siguientes vectores:\n\n-   Una sucesión de números pares de 15 elementos.\n-   Una sucesión de números decimales, con un incremento de 0.15.\n-   Un vector tipo `character`, que indique 4 categorías discretas, repetidas de a 3 cada una.\n-   Un vector que repita 5 veces el siguiente vector: `c(F, T, F, T)`.\n\n2.  Dado el vector `seq(from = 0, to = 1, by = 0.01)`, y utilizando los aprendido sobre manipulación de vectores y expresiones lógicas, genere nuevos vectores de acuerdo a los siguientes criterios:\n\n-   Que contenga los elementos de índices 10 a 20.\n-   Que excluya los elementos 30 a 50. Ayuda: utilice paréntesis.\n-   Que los elementos sean mayores a 0.5.\n-   Que los elementos sean menores o iguales a 0.3 *o* mayores a 0.7.\n-   Que los elementos cumplan con la condición opuesta a la inmediatamente anterior.\n\n3.  Genere un vector de 500 números provenientes de una distribución normal, de media 15 y desvío estándar 4. Para ello, utilice la función `rnorm()` (explore la ayuda mediante `?rnorm`). Seguidamente, verifique los valores de media, mediana y desvío estándar de la muestra. Calcule los cuantiles tradicionales mediante `quantile()`. Calculo el percentil 5% y el 95%.\n\n<br>\n\n<p align=\"center\">\n\n<a href=\"pics/meme_practico_vectores.png\" target=\"_blank\"><img src=\"pics/meme_practico_vectores.png\" style=\"padding: 5px 0 5px 0;width: 50rem;max-width:100%;height:auto;vertical-align:middle;border-style: none;\"/></a>\n\n</p>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}